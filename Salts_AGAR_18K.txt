//***********************************************************************
//AGAR salts analysis for high-magnification SEM images

//The macro segments background, salts and adhering particles,
//then measures the size, shape and coverage (area %) of the salts.
//Output files are saved in a folder using the image file name as title.
//MorphoLibJ, Shape Filter and Read and Write Excel plugins are required.

//See the related publication for details:
//Casas, Hornby, Cimarelli and Dingwell 2020 - "An imaging tool for 
//rapid quantitative morphological characterization of soluble salts 
//on ash particles"
//***********************************************************************

macro "Salts AGAR 18K" {	
//***********************************************************************
//Functions
//***********************************************************************

//set the scale
	function setScale() {
		setTool("line");
		Dialog.create("Crop area")
		Dialog.addMessage("Enter length of scale bar");
		Dialog.addNumber("scale bar length", 30);
		Dialog.show();
		scale=Dialog.getNumber();
		scalehat=scale*3;
		waitForUser("measure scale");
		run("Set Scale...", "known="+scale+" pixel=1 unit=um");
	}
	
//crop the measurement area
	function croppedArea() {
		setTool("rectangle");
		waitForUser("Select area to measure/crop out scale text");	
		run("Crop");
		save(path1);
		run("Duplicate...", " ");
		run("8-bit");
		rename("cropped");
		run("Duplicate...", " ");
		setForegroundColor(0, 0, 0);
		run("Select All");
		run("Fill");
		croparea=getImageID();
		save(path7);
		close(orig);
		selectImage(croparea);
	}

//save an overlay in ROI Manager
	function  thresholdoverlay() {
		run("Analyze Particles...", "size=minPsize-Infinity show=Overlay");
		run("Overlay Options...", "stroke=red width=1 set apply");		
		resetThreshold();
		roiManager("reset");
		run("To ROI Manager");
		run("Hide Overlay");
		selectImage(cropped);		
	}
	
//reduce noise and set the  threshold for surface particles
	function manualthreshold() { 
		selectImage(cropped);
		cropped=getTitle();
		run("Duplicate...", " ");
		particles1=getImageID();
		run("Add Image...", "image=[cropped] x=0 y=0 opacity=50");
		setOption("BlackBackground", false);
		run("Threshold...");
		waitForUser("Set dark threshold", "so that all pixels darker than the background are black...\n...then click \"Apply\"");
		run("Convert to Mask");
		run("Close");
		selectImage(cropped);
		run("Duplicate...", " ");
		particles2=getImageID();
		setOption("BlackBackground", false);
		run("Threshold...");
		waitForUser("Set light threshold", "so that all pixels lighter than the background are black...\n...then click \"Apply\"");
		run("Convert to Mask");
		run("Close");
		imageCalculator("Add create", particles1, particles2);
		run("Fill Holes");
		partholes=getImageID();
		run("Morphological Filters", "operation=Closing element=Diamond radius=1");
		pmanclose=getImageID();
		run("Fill Holes");
		run("Median...", "radius=2");
		run("Morphological Filters", "operation=Dilation element=Diamond radius=1");
		saltsandxtals=getImageID();
		save(path2);
		thresholdoverlay();
		run("Duplicate...", " ");
		rename("pselmanualthresh");
		run("From ROI Manager");
		close("ROI Manager");
		//run("Invert");
		selectImage(partholes);
		close();
		selectImage(particles1);
		close();
		selectImage(particles2);
		close();
		selectImage(pmanclose);
		close();
	}
	
//manual editing of threshold area
	function fillparticles() {
		prefill=getTitle();
		Dialog.create("Particles");
		Dialog.addCheckbox("Are all "+particles+" filled?", 0);
		Dialog.show();
		if (Dialog.getCheckbox()==0) {
			selectImage(cropped);
			cropped=getTitle();
			wait(50);
			selectImage(prefill);
			run("Add Image...", "image=[cropped] x=0 y=0 opacity=50");
			setForegroundColor(0, 0, 0);
			setTool(19);
			waitForUser("Close particle outlines...");
			run("Fill Holes");
			fillparticles();
			Overlay.remove;
		}
	}

//Salts size, shape and area fraction calculation
//also provided as a standalone macro, salts_shape_filter.txt
	function salt_measurements() {
	run("Clear Results");
	open(path7);
	croparea=getImageID();
	selectImage(croparea);
	run("Make Binary");
	run("Measure");
	imagearea=getValue("Area");
	print("image area = " + imagearea);
	run("Clear Results");
	selectImage(xtals);
	Overlay.remove;
	run("Make Binary");
	wait(50);
	run("Analyze Particles...", "size=5-Infinity pixel display");
	sumxA=0;
	for (k=0; k<nResults; k++) {
		sumxA=sumxA+getResult("Area", k);
	}
	xtalarea=sumxA;
	print("xtal area = " + xtalarea);
	run("Clear Results");
	selectImage(salts);
	run("Make Binary");
	wait(50);
	run("Analyze Particles...", "size=5-Infinity pixel display");
	sumsA=0;
	for (k=0; k<nResults; k++) {
		sumsA=sumsA+getResult("Area", k);
	}
	salts=sumsA;
	print ("salts area = " + salts);
	saltcanvas=(imagearea-xtalarea);
	print("salt canvas area = " + saltcanvas);
	saltspercent=((salts/saltcanvas)*100);
	print ("Total salts coverage (%) = " + saltspercent);
	run("Clear Results");
	run("Make Binary");
	run("Invert"); 
	run("Shape Filter", "area=0-Infinity area_convex_hull=0-Infinity perimeter=0-Infinity perimeter_convex_hull=0-Infinity feret_diameter=0-Infinity min._feret_diameter=0-Infinity max._inscr._circle_diameter=0-Infinity area_eq._circle_diameter=0-Infinity long_side_min._bounding_rect.=0-Infinity short_side_min._bounding_rect.=0-Infinity aspect_ratio=1-Infinity area_to_perimeter_ratio=0-Infinity circularity=0-Infinity elongation=0-1 convexity=0-1 solidity=0-1 num._of_holes=0-Infinity thinnes_ratio=0-1 contour_temperatur=0-1 orientation=0-180 fractal_box_dimension=0-2 option->box-sizes=2,3,4,6,8,12,16,32,64 draw_holes fill_results_table exclude_on_edges");
	
	n = nResults;
	area1 = newArray(n); 
	length1 = newArray(n); 
	area2 = newArray(n); 
	length2 = newArray(n);
	ff1 = newArray(n);
	feret1 = newArray(n); 
	minferet1 = newArray(n);
	orientation1 = newArray(n);
	roiLabel1 = newArray(n);
	
	for (j = 0; j<n; j++) {
		orientation1[j] = getResult('Orientation', j); 
		length1[j] = getResult('Peri.', j);
		area1[j] = getResult('Area', j);
		area2[j] = getResult('Area Conv. Hull', j);
		length2[j] = getResult('Peri. Conv. Hull', j);
		ff1[j] = getResult('Thinnes Rt.', j);
		feret1[j] = getResult('Feret', j);
		minferet1[j] = getResult('Min. Feret', j);
	}
	
	run("Clear Results"); 
	for (j = 0; j<n; j++) { 
		setResult("Area", j, area1[j]);
		setResult("Perim.", j, length1[j]); 
		setResult("CH Area", j, area2[j]); 
		setResult("CH Perim.", j, length2[j]); 
		setResult("Solidity", j, area1[j]/area2[j]); 
		setResult("Convexity", j, length2[j]/length1[j]); 
		setResult("FormFactor", j, ff1[j]);
		setResult("Circularity", j, length1[j]/(2*sqrt(PI*area1[j])));
		setResult("Roundness", j, 4*area1[j]/(PI*pow(feret1[j],2)));
		setResult("AR feret", j, minferet1[j]/feret1[j]);
		setResult("Feret d", j, feret1[j]); 
		setResult("MinFeret d", j, minferet1[j]);
		setResult("Orientation", j, orientation1[j]);
	} 
		
	updateResults();
	selectWindow("Results");
	saveAs("results", path5);
	run("Summarize");
	headings = split(String.getResultsHeadings);
	print(String.getResultsHeadings);
	for (b = nResults-4; b<nResults; b++) {
		row=b;
		line = "";
		for (a=0; a<lengthOf(headings); a++)
    		line = line + getResult(headings[a],row) + " ";
			print(line);
	}
	print ("Mean");
	print("s.d.");
	print("min");
	print("max");
	selectWindow("Log");
	save(path6);
}
	
//****************************************************************
//End of functions
//****************************************************************

	
//clear, reset and open images
//**************************************
	run("Clear Results"); 
	if (nImages>0) 
		close("*");
	print("\\Clear");
	Dialog.create("Single or batch");
	Dialog.addCheckbox("Batch process images in a folder?", 1);
	Dialog.addMessage("Uncheck to run on a single image");
	Dialog.show();
	runtype=Dialog.getCheckbox();
	if (runtype==1) {
		input=getDirectory("Choose parent directory");
		output=getDirectory("Choose or create output directory");
		list=getFileList(input);
		Array.print(list);
	}
	else { input=File.openDialog("Choose image to be processed");
		output=getDirectory("Choose or create output directory");
		list=newArray(input);
	}
	for (i = 0; i < list.length; i++) {
		if (runtype==0) 
			open(input);
		else { dirName = list[i];
			dir=input+File.separator+dirName;
			if (endsWith(list[i], "/"))
				continue
			if (endsWith(list[i], ".txt"))
				continue
			open(dir);
		}	
		sampleName=File.nameWithoutExtension;
		savedir=output+File.separator+sampleName;
		orig=getTitle();
		File.makeDirectory(savedir)
		path1=savedir+File.separator+"-crop.tif";
		path2=savedir+File.separator+"-salts and xtals.tif";
		path3=savedir+File.separator+"-xtals.tif";
		path4=savedir+File.separator+"-salts.tif";
		path5=savedir+File.separator+"-results.csv";
		path6=savedir+File.separator+"-log.txt";
		path7=savedir+File.separator+"-croparea.tif";
		
//scale, crop and threshold image
//**************************************	
		setScale();
		croppedArea();
		croparea=getImageID();
		selectWindow("cropped");
		cropped=getImageID();

//roughly define size difference between salts and particles
//**************************************
		run("Duplicate...", " ");
		run("Select None");
		setTool("freehand");
		waitForUser("Outline smallest adhering non-salt surface particle");
		minPsize=getValue("Area")/1.5;
		close();
		
//thresholding
//**************************************
		manualthreshold();
		//selectWindow("pselmanualthresh");
		run("Create Mask");
		xtals=getImageID();
		close("pselmanualthresh");
		run("Fill Holes");
		particles = "adhering (non-salt) particles";
		fillparticles();
	
//save files
//**************************************
		saveAs(path3);
		open(path2);
		saltsandxtals=getTitle();
		//run("Invert");
		imageCalculator("subtract create", saltsandxtals, xtals);
		run("Fill Holes");
		run("Analyze Particles...", "size=5-Infinity pixel show=Masks");
		particles="salt crystals";
		fillparticles();
		saveAs(path4);
		salts=getImageID();
	
//run calculations
//**************************************	
		print("\\Clear");
		salt_measurements();
		close("*");
		print("\\Clear");
		close("Results");		
	}
}